# =============================================================================
# CONFIGURATION SPRING BOOT - CLIENT API - PRODUCTION
# src/main/resources/application-prod.properties
# =============================================================================

# Application metadata
spring.application.name=client-api

# Server configuration
server.port=${SERVER_PORT:8081}
server.servlet.context-path=/api/v1

# Active profile
# spring.profiles.active=prod

# Configuration JWT (utilise vos clés existantes)
app.jwt.secret=${JWT_SECRET:payetonkawa-super-secret-key-for-jwt-token-generation-2024-very-long-key}
app.jwt.expiration=86400000

# =============================================================================
# DATABASE CONFIGURATION (PostgreSQL - Production)
# =============================================================================

# PostgreSQL Database connection
spring.datasource.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:payetonkawa_clients}
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.username=${DB_USERNAME:payetonkawa_user}
spring.datasource.password=${DB_PASSWORD}

# Connection pool configuration (HikariCP)
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# =============================================================================
# JPA/HIBERNATE CONFIGURATION (Production)
# =============================================================================

# Hibernate DDL mode (validate for production - no automatic schema changes)
spring.jpa.hibernate.ddl-auto=validate

# Hide SQL queries in production logs
spring.jpa.show-sql=false

# Disable SQL formatting for performance
spring.jpa.properties.hibernate.format_sql=false

# PostgreSQL dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Performance optimizations
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.generate_statistics=false

# =============================================================================
# LIQUIBASE CONFIGURATION (Database migrations)
# =============================================================================

# Enable Liquibase for production migrations
spring.liquibase.enabled=true
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml

# =============================================================================
# LOGGING CONFIGURATION (Production)
# =============================================================================

# Log files configuration
logging.file.name=/app/logs/payetonkawa-client-api.log
logging.file.path=/app/logs

# Rotation des fichiers de logs (garde votre config)
logging.logback.rollingpolicy.file-name-pattern=/app/logs/payetonkawa-client-api.%d{yyyy-MM-dd}.%i.log.gz
logging.logback.rollingpolicy.max-file-size=100MB
logging.logback.rollingpolicy.max-history=30
logging.logback.rollingpolicy.total-size-cap=2GB

# Production logging levels (moins verbeux)
logging.level.root=INFO
logging.level.com.example.clientapi=INFO
logging.level.org.springframework.security=WARN
logging.level.org.springframework.web=WARN

# Disable SQL logging in production
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Console et file patterns (garde votre style)
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# =============================================================================
# ACTUATOR CONFIGURATION (Production Monitoring)
# =============================================================================

# Expose monitoring endpoints
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoints.web.base-path=/actuator

# Health endpoint configuration
# management.endpoint.health.show-details=when-authorized

# Prometheus metrics for monitoring
management.metrics.export.prometheus.enabled=true

management.endpoints.web.exposure.include=*
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.endpoint.health.show-details=always

# =============================================================================
# SECURITY CONFIGURATION (Production - utilise votre SecurityConfig)
# =============================================================================

# IMPORTANT: Ne pas désactiver la sécurité en production
# (Commenté car vous avez votre SecurityConfig.java)
# spring.autoconfigure.exclude=...

# =============================================================================
# VALIDATION CONFIGURATION (Production)
# =============================================================================

# Validation configuration (garde votre config)
spring.validation.fail-fast=true

# =============================================================================
# JSON CONFIGURATION (Production)
# =============================================================================

# JSON configuration optimisée pour la production
spring.jackson.default-property-inclusion=non_null
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Europe/Paris

# Optimisations JSON
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false

# =============================================================================
# DEVELOPMENT TOOLS CONFIGURATION (Disabled in production)
# =============================================================================

# Disable dev tools in production
spring.devtools.livereload.enabled=false
spring.devtools.restart.enabled=false

# =============================================================================
# PERFORMANCE OPTIMIZATIONS (Production)
# =============================================================================

# Server compression
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# HTTP/2 support
server.http2.enabled=true

---

# =============================================================================
# CONFIGURATION TEST (pour vos tests)
# src/main/resources/application-test.properties
# =============================================================================

# Application metadata
spring.application.name=client-api-test

# Server configuration (port différent pour éviter conflits)
server.port=0

# Configuration JWT (même clé pour les tests)
app.jwt.secret=payetonkawa-super-secret-key-for-jwt-token-generation-2024-very-long-key
app.jwt.expiration=86400000

# =============================================================================
# DATABASE CONFIGURATION (H2 - Tests)
# =============================================================================

# H2 Database pour les tests (comme votre config dev)
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password

# =============================================================================
# JPA/HIBERNATE CONFIGURATION (Tests)
# =============================================================================

# Hibernate DDL mode pour les tests
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect

# =============================================================================
# LIQUIBASE CONFIGURATION (Disabled for tests)
# =============================================================================

# Désactiver Liquibase pour les tests (H2 avec create-drop)
spring.liquibase.enabled=false

# =============================================================================
# LOGGING CONFIGURATION (Tests - minimal)
# =============================================================================

# Logging minimal pour les tests
logging.level.root=WARN
logging.level.com.example.clientapi=INFO
logging.level.org.springframework.security=WARN

# =============================================================================
# ACTUATOR CONFIGURATION (Tests - minimal)
# =============================================================================

# Endpoints minimaux pour les tests
management.endpoints.web.exposure.include=health

# =============================================================================
# SECURITY CONFIGURATION (Tests - permissive pour faciliter les tests)
# =============================================================================

# Garde votre SecurityConfig mais avec profil test si nécessaire

# =============================================================================
# VALIDATION & JSON CONFIGURATION (Tests)
# =============================================================================

spring.validation.fail-fast=true
spring.jackson.default-property-inclusion=always
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=Europe/Paris

---

# =============================================================================
# Variables d'environnement pour Docker
# .env
# =============================================================================

# Base de données PostgreSQL
DB_HOST=postgres
DB_PORT=5432
DB_NAME=payetonkawa_clients
DB_USERNAME=payetonkawa_user
DB_PASSWORD=your_secure_password_here

# Application
SERVER_PORT=8081

# JWT (utilise votre clé ou génère une nouvelle)
JWT_SECRET=payetonkawa-super-secret-key-for-jwt-token-generation-2024-very-long-key-production

---

# =============================================================================
# Script de génération .env mis à jour
# scripts/generate-env.sh
# =============================================================================

#!/bin/bash

echo "🔐 Génération du fichier .env pour PayeTonKawa Client API"

# Génération des mots de passe
DB_PASSWORD=$(openssl rand -base64 32 | tr -d "=+/" | cut -c1-32)
JWT_SECRET="payetonkawa-super-secret-key-for-jwt-token-generation-2024-$(openssl rand -hex 16)"

# Création .env
cat > .env << EOF
# Configuration générée le $(date)
# Basée sur votre application.properties existant

# Base de données PostgreSQL
DB_HOST=postgres
DB_PORT=5432
DB_NAME=payetonkawa_clients
DB_USERNAME=payetonkawa_user
DB_PASSWORD=$DB_PASSWORD

# Application
SERVER_PORT=8081

# JWT (compatible avec votre app.jwt.secret)
JWT_SECRET=$JWT_SECRET
EOF

chmod 600 .env

echo "✅ Fichier .env créé"
echo "🔐 DB Password: $DB_PASSWORD"
echo "🔑 JWT Secret: $JWT_SECRET"
echo "🔒 Compatible avec votre configuration existante"