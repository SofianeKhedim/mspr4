
services:
  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: client-api-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-payetonkawa_clients}
      POSTGRES_USER: ${DB_USERNAME:-payetonkawa_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - client-api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-payetonkawa_user} -d ${DB_NAME:-payetonkawa_clients}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Client
  client-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: client-api-app
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-payetonkawa_clients}
      DB_USERNAME: ${DB_USERNAME:-payetonkawa_user}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8081
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC"
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - client-api-network
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local

networks:
  client-api-network:
    driver: bridge